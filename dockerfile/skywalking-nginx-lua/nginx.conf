error_log  /usr/local/openresty/nginx/logs/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  lua_package_path "/usr/local/skywalking-nginx-lua/?.lua;;";
  resolver 8.8.8.8;
  keepalive_timeout  65;

  gzip  on;
  gzip_types text/plain application/json application/x-javascript application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png image/svg;
  add_header X-Frame-Options open.weixin.qq.com;
  include       /usr/local/openresty/nginx/conf/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /usr/local/openresty/nginx/logs/access.log  main;

  sendfile        on;
  include /etc/nginx/conf.d/*.conf;
  lua_shared_dict tracing_buffer 100m;
  # Init is the timer setter and keeper
    # Setup an infinite loop timer to do register and trace report.
    init_worker_by_lua_block {
        local metadata_buffer = ngx.shared.tracing_buffer

        -- Set service name
        metadata_buffer:set('serviceName', 'skyNginx')
        -- Instance means the number of Nginx deployment, does not mean the worker instances
        metadata_buffer:set('serviceInstanceName', 'NginxIp')

        -- set random seed
        require("skywalking.util").set_randomseed()
        require("skywalking.client"):startBackendTimer("YourBackendUrl")
    }
  server {

    listen 808;
    location  ~ {
      rewrite_by_lua_block {
                ------------------------------------------------------
                -- NOTICE, this should be changed manually
                -- This variable represents the upstream logic address
                -- Please set them as service logic name or DNS name
                --
                -- Currently, we can not have the upstream real network address
                ------------------------------------------------------
                require("skywalking.tracer"):start("upstream service")
                -- If you want correlation custom data to the downstream service
                -- require("skywalking.tracer"):start("upstream service", {custom = "custom_value"})
     }
      proxy_pass http://127.0.0.1:8080;
      body_filter_by_lua_block {
                if ngx.arg[2] then
                    require("skywalking.tracer"):finish()
                end
            }

      log_by_lua_block {
          require("skywalking.tracer"):prepareForReport()
            }
        }
  }
}
